const
hw = {};
hw.a_programFunctions = {};
hw.a_programFunctions.a_keyboardFunctions = {};
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter = {};
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.a_modeRouter	 = modeRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.b_hjklRouter	 = hjklRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.c_aioNRouter	 = aioNRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.d_numpadRouter	 = numpadRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.e_scrollRouter	 = scrollRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.f_shiftRouter	 = shiftRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.g_topRowRouter	 = topRowRouter;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner = {};
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.a_styleTuner	 = styleTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.b_borderRadiusTuner	 = borderRadiusTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.c_boxShadowTuner	 = boxShadowTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.f_paddingTuner	 = paddingTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.g_alignmentTuner	 = alignmentTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.h_styleTuner.h_fontTuner	 = fontTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner = {};
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.a_constructionTuner	 = constructionTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.b_windowTuner	 = windowTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.c_grabTuner	 = grabTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.d_edgeTuner	 = edgeTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.e_duplicateTuner	 = duplicateTuner;
hw.a_programFunctions.a_keyboardFunctions.a_keyboardRouter.i_constructionTuner.f_tricolourTuner	 = tricolourTuner;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys = {};
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView = {};
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.a_spaceViewOn	 = spaceViewOn;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.b_spaceViewOff	 = spaceViewOff;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.c_spaceViewToggle	 = spaceViewToggle;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.d_spaceViewToggleAndExposeAttributesAsText	 = spaceViewToggleAndExposeAttributesAsText;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.e_flipHauptMode	 = flipHauptMode;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.f_removePointerEventsNone	 = removePointerEventsNone;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.a_spaceView.g_restorePointerEventsNone	 = restorePointerEventsNone;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.b_modeKeys = {};
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.b_modeKeys.a_constructionModeKeys	 = constructionModeKeys;
hw.a_programFunctions.a_keyboardFunctions.b_topModeKeys.b_modeKeys.b_styleDeclarationModeKeys	 = styleDeclarationModeKeys;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations = {};
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.a_gridArray	 = gridArray;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.b_pasteOut	 = pasteOut;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.c_pasteSingle	 = pasteSingle;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.d_pasteMultiple	 = pasteMultiple;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.e_groupPaste	 = groupPaste;
hw.a_programFunctions.a_keyboardFunctions.c_bufferOperations.f_spreadReference	 = spreadReference;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous = {};
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.a_writeInfoToFace	 = writeInfoToFace;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.b_togglePartNames	 = togglePartNames;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.c_externalLink	 = externalLink;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.d_promptDownloadLink	 = promptDownloadLink;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.e_copyFilenameLink	 = copyFilenameLink;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.e_copyOutgoingHashLink	 = copyOutgoingHashLink;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.f_finalizeHTMLandOpen	 = finalizeHTMLandOpen;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.g_wrapParts	 = wrapParts;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.h_unwrapParts	 = unwrapParts;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.h_unwrapPartsAlways	 = unwrapPartsAlways;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.i_findFurthestExtent	 = findFurthestExtent;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.j_wrapDocument	 = wrapDocument;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.k_findLeastExtent	 = findLeastExtent;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.l_wrapDocumentWithScreen	 = wrapDocumentWithScreen;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.m_userSelectNone	 = userSelectNone;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.n_flipAnchorZ	 = flipAnchorZ;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.o_buttonDiv	 = buttonDiv;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.p_overflowMain	 = overflowMain;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.q_makeItContentEditable	 = makeItContentEditable;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.r_goFullscreen	 = goFullscreen;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.s_setDragPullFromContext	 = setDragPullFromContext;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.t_wrapPink	 = wrapPink;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.u_wrapGrey	 = wrapGrey;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.v_wrapBlue	 = wrapBlue;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.w_cutOutImage	 = cutOutImage;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.x_saveInternalImage	 = saveInternalImage;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.y_cutImagesAll	 = cutImagesAll;
hw.a_programFunctions.a_keyboardFunctions.d_miscellaneous.z_applyImageBack	 = applyImageBack;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend = {};
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.a_quitSave	 = quitSave;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.b_saveHTMLparticle	 = saveHTMLparticle;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.c_saveParticlePreparation	 = saveParticlePreparation;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.d_copyOpenerContents	 = copyOpenerContents;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.e_openFile	 = openFile;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.f_appendFile	 = appendFile;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.g_openImageFile	 = openImageFile;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.h_openHTMLinNewWindow	 = openHTMLinNewWindow;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.i_saveStartupTutorial	 = saveStartupTutorial;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.j_saveWithHeaderFooter	 = saveWithHeaderFooter;
hw.a_programFunctions.a_keyboardFunctions.e_saveAndAppend.k_saveFromHotdog	 = saveFromHotdog;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.a_flowManagement = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.a_flowManagement.a_reflow	 = reflow;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.a_flowManagement.b_reflowGlobal	 = reflowGlobal;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.a_flowManagement.c_reflowPerTrip	 = reflowPerTrip;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement.a_manageGlobalZ	 = manageGlobalZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement.b_ceilingGlobalZ	 = ceilingGlobalZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement.c_lowerGlobalZ	 = lowerGlobalZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement.d_raiseGlobalZ	 = raiseGlobalZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.a_globalZManagement.e_floorGlobalZ	 = floorGlobalZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement.a_manageTripartiteZ	 = manageTripartiteZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement.b_ceilingTripartiteZ	 = ceilingTripartiteZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement.c_lowerTripartiteZ	 = lowerTripartiteZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement.d_raiseTripartiteZ	 = raiseTripartiteZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.b_tripartiteZManagement.e_floorTripartiteZ	 = floorTripartiteZ;
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.c_findZextrema = {};
hw.a_programFunctions.a_keyboardFunctions.f_documentOrder.b_zIndexManagement.c_findZextrema.a_findZextrema	 = findZextrema;
hw.a_programFunctions.a_keyboardFunctions.g_movement = {};
hw.a_programFunctions.a_keyboardFunctions.g_movement.a_alignCenter = {};
hw.a_programFunctions.a_keyboardFunctions.g_movement.a_alignCenter.a_moveLeftAndCentre	 = moveLeftAndCentre;
hw.a_programFunctions.a_keyboardFunctions.g_movement.a_alignCenter.b_moveDownAndCentre	 = moveDownAndCentre;
hw.a_programFunctions.a_keyboardFunctions.g_movement.a_alignCenter.c_moveUpAndCentre	 = moveUpAndCentre;
hw.a_programFunctions.a_keyboardFunctions.g_movement.a_alignCenter.d_moveRightAndCentre	 = moveRightAndCentre;
hw.a_programFunctions.a_keyboardFunctions.g_movement.b_alignEdges = {};
hw.a_programFunctions.a_keyboardFunctions.g_movement.b_alignEdges.a_moveLeft	 = moveLeft;
hw.a_programFunctions.a_keyboardFunctions.g_movement.b_alignEdges.b_moveDown	 = moveDown;
hw.a_programFunctions.a_keyboardFunctions.g_movement.b_alignEdges.c_moveUp	 = moveUp;
hw.a_programFunctions.a_keyboardFunctions.g_movement.b_alignEdges.d_moveRight	 = moveRight;
hw.a_programFunctions.a_keyboardFunctions.g_movement.c_moveAll = {};
hw.a_programFunctions.a_keyboardFunctions.g_movement.c_moveAll.a_moveAllLeft	 = moveAllLeft;
hw.a_programFunctions.a_keyboardFunctions.g_movement.c_moveAll.b_moveAllDown	 = moveAllDown;
hw.a_programFunctions.a_keyboardFunctions.g_movement.c_moveAll.c_moveAllUp	 = moveAllUp;
hw.a_programFunctions.a_keyboardFunctions.g_movement.c_moveAll.d_moveAllRight	 = moveAllRight;
hw.a_programFunctions.a_keyboardFunctions.g_movement.d_explicitEntry = {};
hw.a_programFunctions.a_keyboardFunctions.g_movement.d_explicitEntry.a_explicitEntryForTopAndLeft	 = explicitEntryForTopAndLeft;
hw.a_programFunctions.a_keyboardFunctions.h_extendEdge = {};
hw.a_programFunctions.a_keyboardFunctions.h_extendEdge.a_extendEdge	 = extendEdge;
hw.a_programFunctions.a_keyboardFunctions.h_extendEdge.b_halfSize	 = halfSize;
hw.a_programFunctions.a_keyboardFunctions.h_extendEdge.c_doubleSize	 = doubleSize;
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations = {};
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations.a_assignAllColours	 = assignAllColours;
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations.b_swapColours	 = swapColours;
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations.c_setCoinTrip	 = setCoinTrip;
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations.d_recoverColouration	 = recoverColouration;
hw.a_programFunctions.a_keyboardFunctions.i_tripartiteOperations.e_readCoins	 = readCoins;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.a_deletion = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.a_deletion.a_deleteCoin	 = deleteCoin;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.a_deletion.b_groupDeletion	 = groupDeletion;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.a_insertNew = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.a_insertNew.a_insertNewCoin	 = insertNewCoin;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.a_insertNew.b_insertNewDuplicate	 = insertNewDuplicate;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.a_insertNew.c_insertNewImage	 = insertNewImage;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.a_insertDragIns	 = insertDragIns;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.b_insertNamedColours	 = insertNamedColours;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.c_insertGrayscale	 = insertGrayscale;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.d_insertFontSizeAndPadding	 = insertFontSizeAndPadding;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.e_insertFontVarious	 = insertFontVarious;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.f_insertBorderSelector	 = insertBorderSelector;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.g_insertBoxShadowSelector	 = insertBoxShadowSelector;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.h_otherFontAndTemplates	 = otherFontAndTemplates;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.b_insertion.b_insertDragSelector.i_insertSingleTemplates	 = insertSingleTemplates;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.c_guideLayer = {};
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.c_guideLayer.a_guideLayer	 = guideLayer;
hw.a_programFunctions.a_keyboardFunctions.j_insertionAndDeletion.c_guideLayer.b_pullFromGuideLayer	 = pullFromGuideLayer;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack = {};
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.a_brickHorizontal	 = brickHorizontal;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.b_brickVertical	 = brickVertical;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.c_stackHorizontal	 = stackHorizontal;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.d_stackVertical	 = stackVertical;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.e_stepStackDiagonal	 = stepStackDiagonal;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.f_stackPoint	 = stackPoint;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.g_stepStackFlat	 = stepStackFlat;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.h_stackVerticalCentre	 = stackVerticalCentre;
hw.a_programFunctions.a_keyboardFunctions.k_brickAndStack.i_stackHorizontalCentre	 = stackHorizontalCentre;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations = {};
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.a_gridToPadding	 = gridToPadding;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.b_gridToBorderRadius	 = gridToBorderRadius;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.c_gridToFontSize	 = gridToFontSize;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.d_gridToOutline	 = gridToOutline;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.e_gridToBoxShadow	 = gridToBoxShadow;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.f_cycleTextAlignment	 = cycleTextAlignment;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.g_cycleFonts	 = cycleFonts;
hw.a_programFunctions.a_keyboardFunctions.l_styleOperations.h_gridToIndent	 = gridToIndent;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry = {};
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.a_enterArticleContent	 = enterArticleContent;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.b_enterCODEnote	 = enterCODEnote;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.c_enterPHPref	 = enterPHPref;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.d_jsNameAndNote	 = jsNameAndNote;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.e_enterBackgroundColour	 = enterBackgroundColour;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.f_enterForegroundColour	 = enterForegroundColour;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.g_enterOutlineColour	 = enterOutlineColour;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.h_enterPageEchelon	 = enterPageEchelon;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.i_setSequentialIds	 = setSequentialIds;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.j_customPrompt	 = customPrompt;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.k_enterImageAltText	 = enterImageAltText;
hw.a_programFunctions.a_keyboardFunctions.m_manualEntry.l_enterClassNames	 = enterClassNames;
hw.a_programFunctions.a_keyboardFunctions.n_window = {};
hw.a_programFunctions.a_keyboardFunctions.n_window.a_windowEdge	 = windowEdge;
hw.a_programFunctions.a_keyboardFunctions.n_window.b_openTextareaInNewWindow	 = openTextareaInNewWindow;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale = {};
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.a_innerRotation = {};
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.a_innerRotation.a_innerRotation	 = innerRotation;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.a_innerRotation.b_innerRotationMin	 = innerRotationMin;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.a_innerRotation.c_innerRotationCan	 = innerRotationCan;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform = {};
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.a_rotateUnder	 = rotateUnder;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.b_rotateOver	 = rotateOver;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.c_rotateLeft	 = rotateLeft;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.d_rotateRight	 = rotateRight;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.e_rotateZleft	 = rotateZleft;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.f_rotateZright	 = rotateZright;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.b_3dTransform.g_clearRotation	 = clearRotation;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.c_outerScale = {};
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.c_outerScale.a_outerScaleUp	 = outerScaleUp;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.c_outerScale.b_outerScaleDown	 = outerScaleDown;
hw.a_programFunctions.a_keyboardFunctions.o_rotationAndScale.c_outerScale.c_resetScale	 = resetScale;
hw.a_programFunctions.a_keyboardFunctions.p_F1menu = {};
hw.a_programFunctions.a_keyboardFunctions.p_F1menu.a_helpMenu	 = helpMenu;
hw.a_programFunctions.a_keyboardFunctions.q_notificationsSystem = {};
hw.a_programFunctions.a_keyboardFunctions.q_notificationsSystem.a_noteCoin	 = noteCoin;
hw.a_programFunctions.a_keyboardFunctions.q_notificationsSystem.b_HJKLnoteCoin	 = HJKLnoteCoin;
hw.a_programFunctions.a_keyboardFunctions.q_notificationsSystem.c_noteStyle	 = noteStyle;
hw.a_programFunctions.a_keyboardFunctions.r_topLayerManager = {};
hw.a_programFunctions.a_keyboardFunctions.r_topLayerManager.a_makeTopLayer	 = makeTopLayer;
hw.a_programFunctions.a_keyboardFunctions.r_topLayerManager.b_recoverCoinFocus	 = recoverCoinFocus;
hw.a_programFunctions.a_keyboardFunctions.s_interfaceLayer = {};
hw.a_programFunctions.a_keyboardFunctions.s_interfaceLayer.a_toggleInterfaceLayer	 = toggleInterfaceLayer;
hw.a_programFunctions.a_keyboardFunctions.s_interfaceLayer.b_enterWizardMaster	 = enterWizardMaster;
hw.a_programFunctions.a_keyboardFunctions.s_interfaceLayer.c_toggleInterfaceShelf	 = toggleInterfaceShelf;
hw.a_programFunctions.a_keyboardFunctions.s_interfaceLayer.d_setDefaultTemplate	 = setDefaultTemplate;
hw.a_programFunctions.a_keyboardFunctions.t_wizards = {};
hw.a_programFunctions.a_keyboardFunctions.t_wizards.a_wizarda	 = wizarda;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.b_wizardb	 = wizardb;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.c_wizardc	 = wizardc;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.d_wizardd	 = wizardd;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.e_wizarde	 = wizarde;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.f_wizardf	 = wizardf;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.g_wizardg	 = wizardg;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.h_wizardh	 = wizardh;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.i_wizardi	 = wizardi;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.j_wizardj	 = wizardj;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.k_wizardk	 = wizardk;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.l_wizardl	 = wizardl;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.m_wizardm	 = wizardm;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.n_wizardn	 = wizardn;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.o_wizardo	 = wizardo;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.p_wizardp	 = wizardp;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.q_wizardq	 = wizardq;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.r_wizardr	 = wizardr;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.s_wizards	 = wizards;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.t_wizardt	 = wizardt;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.u_wizardu	 = wizardu;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.v_wizardv	 = wizardv;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.w_wizardw	 = wizardw;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.x_wizardx	 = wizardx;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.y_wizardy	 = wizardy;
hw.a_programFunctions.a_keyboardFunctions.t_wizards.z_wizardz	 = wizardz;
hw.a_programFunctions.a_keyboardFunctions.u_localView = {};
hw.a_programFunctions.a_keyboardFunctions.u_localView.a_toggleLocalView	 = toggleLocalView;
hw.a_programFunctions.a_keyboardFunctions.u_localView.b_cycleNextLocalView	 = cycleNextLocalView;
hw.a_programFunctions.a_keyboardFunctions.u_localView.c_cyclePreviousLocalView	 = cyclePreviousLocalView;
hw.a_programFunctions.a_keyboardFunctions.v_cleanConversion = {};
hw.a_programFunctions.a_keyboardFunctions.v_cleanConversion.a_buttonizer	 = buttonizer;
hw.a_programFunctions.b_mouseFunctions = {};
hw.a_programFunctions.b_mouseFunctions.a_enterNewPartFromMouseInput	 = enterNewPartFromMouseInput;
hw.a_programFunctions.b_mouseFunctions.b_mouseGiveFocus	 = mouseGiveFocus;
hw.a_programFunctions.b_mouseFunctions.c_mousePlaceCursor	 = mousePlaceCursor;
hw.a_programFunctions.c_focusManagement = {};
hw.a_programFunctions.c_focusManagement.a_spatialCursor = {};
hw.a_programFunctions.c_focusManagement.a_spatialCursor.a_coinToCursor	 = coinToCursor;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.b_cursorToCoin	 = cursorToCoin;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.c_cursorToEnd	 = cursorToEnd;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.d_cursorToHome	 = cursorToHome;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.e_coinCentreToCursor	 = coinCentreToCursor;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.f_cursorToCoinCentre	 = cursorToCoinCentre;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.g_cursorToCoinTopLeft	 = cursorToCoinTopLeft;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.h_cursorToCoinTopRight	 = cursorToCoinTopRight;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.i_cursorToCoinBottomLeft	 = cursorToCoinBottomLeft;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.j_cursorToCoinBottomRight	 = cursorToCoinBottomRight;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.k_cursorToWindowCentre	 = cursorToWindowCentre;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.l_cursorMoveLeft	 = cursorMoveLeft;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.m_cursorMoveRight	 = cursorMoveRight;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.n_cursorMoveUp	 = cursorMoveUp;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.o_cursorMoveDown	 = cursorMoveDown;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.p_cursorToCoinTopCentre	 = cursorToCoinTopCentre;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.q_cursorToCoinLeftCentre	 = cursorToCoinLeftCentre;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.r_cursorToCoinRightCentre	 = cursorToCoinRightCentre;
hw.a_programFunctions.c_focusManagement.a_spatialCursor.s_cursorToCoinBottomCentre	 = cursorToCoinBottomCentre;
hw.a_programFunctions.c_focusManagement.b_focus = {};
hw.a_programFunctions.c_focusManagement.b_focus.a_focusFlip	 = focusFlip;
hw.a_programFunctions.c_focusManagement.b_focus.b_focusPrevious	 = focusPrevious;
hw.a_programFunctions.c_focusManagement.b_focus.c_focusNext	 = focusNext;
hw.a_programFunctions.c_focusManagement.b_focus.d_focusFirst	 = focusFirst;
hw.a_programFunctions.c_focusManagement.b_focus.e_focusLast	 = focusLast;
hw.a_programFunctions.c_focusManagement.b_focus.f_focusNextColour	 = focusNextColour;
hw.a_programFunctions.c_focusManagement.b_focus.g_focusSet	 = focusSet;
hw.a_programFunctions.c_focusManagement.c_scanAndSet = {};
hw.a_programFunctions.c_focusManagement.c_scanAndSet.a_scanForCoin	 = scanForCoin;
hw.a_programFunctions.c_focusManagement.c_scanAndSet.b_setCoinTripColouration	 = setCoinTripColouration;
